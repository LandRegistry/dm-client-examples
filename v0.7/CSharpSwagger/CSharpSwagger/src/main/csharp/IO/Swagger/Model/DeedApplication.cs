/* 
 * Deed API
 *
 * Land Registry Deed API
 *
 * OpenAPI spec version: 2.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DeedApplication
    /// </summary>
    [DataContract]
    public partial class DeedApplication :  IEquatable<DeedApplication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeedApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeedApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeedApplication" /> class.
        /// </summary>
        /// <param name="TitleNumber">TitleNumber (required).</param>
        /// <param name="Borrowers">Borrowers (required).</param>
        /// <param name="MdRef">MdRef (required).</param>
        /// <param name="IdentityChecked">IdentityChecked (required).</param>
        /// <param name="PropertyAddress">The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA (required).</param>
        /// <param name="Reference">A conveyancer reference.  Can be displayed on the deed if the mortgage document template permits..</param>
        /// <param name="DateOfMortgageOffer">Date that the mortgage offer was made.  Can be displayed on the deed if the mortgage document template permits..</param>
        /// <param name="MiscellaneousInformation">Values unsuited to other keys. Can be displayed on the deed if the mortgage document template permits..</param>
        public DeedApplication(string TitleNumber = default(string), Borrowers Borrowers = default(Borrowers), string MdRef = default(string), string IdentityChecked = default(string), string PropertyAddress = default(string), string Reference = default(string), string DateOfMortgageOffer = default(string), string MiscellaneousInformation = default(string))
        {
            // to ensure "TitleNumber" is required (not null)
            if (TitleNumber == null)
            {
                throw new InvalidDataException("TitleNumber is a required property for DeedApplication and cannot be null");
            }
            else
            {
                this.TitleNumber = TitleNumber;
            }
            // to ensure "Borrowers" is required (not null)
            if (Borrowers == null)
            {
                throw new InvalidDataException("Borrowers is a required property for DeedApplication and cannot be null");
            }
            else
            {
                this.Borrowers = Borrowers;
            }
            // to ensure "MdRef" is required (not null)
            if (MdRef == null)
            {
                throw new InvalidDataException("MdRef is a required property for DeedApplication and cannot be null");
            }
            else
            {
                this.MdRef = MdRef;
            }
            // to ensure "IdentityChecked" is required (not null)
            if (IdentityChecked == null)
            {
                throw new InvalidDataException("IdentityChecked is a required property for DeedApplication and cannot be null");
            }
            else
            {
                this.IdentityChecked = IdentityChecked;
            }
            // to ensure "PropertyAddress" is required (not null)
            if (PropertyAddress == null)
            {
                throw new InvalidDataException("PropertyAddress is a required property for DeedApplication and cannot be null");
            }
            else
            {
                this.PropertyAddress = PropertyAddress;
            }
            this.Reference = Reference;
            this.DateOfMortgageOffer = DateOfMortgageOffer;
            this.MiscellaneousInformation = MiscellaneousInformation;
        }
        
        /// <summary>
        /// Gets or Sets TitleNumber
        /// </summary>
        [DataMember(Name="title_number", EmitDefaultValue=false)]
        public string TitleNumber { get; set; }
        /// <summary>
        /// Gets or Sets Borrowers
        /// </summary>
        [DataMember(Name="borrowers", EmitDefaultValue=false)]
        public Borrowers Borrowers { get; set; }
        /// <summary>
        /// Gets or Sets MdRef
        /// </summary>
        [DataMember(Name="md_ref", EmitDefaultValue=false)]
        public string MdRef { get; set; }
        /// <summary>
        /// Gets or Sets IdentityChecked
        /// </summary>
        [DataMember(Name="identity_checked", EmitDefaultValue=false)]
        public string IdentityChecked { get; set; }
        /// <summary>
        /// The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA
        /// </summary>
        /// <value>The address of property that the deed relates. This should be supplied in a comma separated format e.g. 30 wakefield rd, plymouth, PL6 3WA</value>
        [DataMember(Name="property_address", EmitDefaultValue=false)]
        public string PropertyAddress { get; set; }
        /// <summary>
        /// A conveyancer reference.  Can be displayed on the deed if the mortgage document template permits.
        /// </summary>
        /// <value>A conveyancer reference.  Can be displayed on the deed if the mortgage document template permits.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }
        /// <summary>
        /// Date that the mortgage offer was made.  Can be displayed on the deed if the mortgage document template permits.
        /// </summary>
        /// <value>Date that the mortgage offer was made.  Can be displayed on the deed if the mortgage document template permits.</value>
        [DataMember(Name="date_of_mortgage_offer", EmitDefaultValue=false)]
        public string DateOfMortgageOffer { get; set; }
        /// <summary>
        /// Values unsuited to other keys. Can be displayed on the deed if the mortgage document template permits.
        /// </summary>
        /// <value>Values unsuited to other keys. Can be displayed on the deed if the mortgage document template permits.</value>
        [DataMember(Name="miscellaneous_information", EmitDefaultValue=false)]
        public string MiscellaneousInformation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeedApplication {\n");
            sb.Append("  TitleNumber: ").Append(TitleNumber).Append("\n");
            sb.Append("  Borrowers: ").Append(Borrowers).Append("\n");
            sb.Append("  MdRef: ").Append(MdRef).Append("\n");
            sb.Append("  IdentityChecked: ").Append(IdentityChecked).Append("\n");
            sb.Append("  PropertyAddress: ").Append(PropertyAddress).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  DateOfMortgageOffer: ").Append(DateOfMortgageOffer).Append("\n");
            sb.Append("  MiscellaneousInformation: ").Append(MiscellaneousInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeedApplication);
        }

        /// <summary>
        /// Returns true if DeedApplication instances are equal
        /// </summary>
        /// <param name="other">Instance of DeedApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeedApplication other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TitleNumber == other.TitleNumber ||
                    this.TitleNumber != null &&
                    this.TitleNumber.Equals(other.TitleNumber)
                ) && 
                (
                    this.Borrowers == other.Borrowers ||
                    this.Borrowers != null &&
                    this.Borrowers.Equals(other.Borrowers)
                ) && 
                (
                    this.MdRef == other.MdRef ||
                    this.MdRef != null &&
                    this.MdRef.Equals(other.MdRef)
                ) && 
                (
                    this.IdentityChecked == other.IdentityChecked ||
                    this.IdentityChecked != null &&
                    this.IdentityChecked.Equals(other.IdentityChecked)
                ) && 
                (
                    this.PropertyAddress == other.PropertyAddress ||
                    this.PropertyAddress != null &&
                    this.PropertyAddress.Equals(other.PropertyAddress)
                ) && 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.DateOfMortgageOffer == other.DateOfMortgageOffer ||
                    this.DateOfMortgageOffer != null &&
                    this.DateOfMortgageOffer.Equals(other.DateOfMortgageOffer)
                ) && 
                (
                    this.MiscellaneousInformation == other.MiscellaneousInformation ||
                    this.MiscellaneousInformation != null &&
                    this.MiscellaneousInformation.Equals(other.MiscellaneousInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TitleNumber != null)
                    hash = hash * 59 + this.TitleNumber.GetHashCode();
                if (this.Borrowers != null)
                    hash = hash * 59 + this.Borrowers.GetHashCode();
                if (this.MdRef != null)
                    hash = hash * 59 + this.MdRef.GetHashCode();
                if (this.IdentityChecked != null)
                    hash = hash * 59 + this.IdentityChecked.GetHashCode();
                if (this.PropertyAddress != null)
                    hash = hash * 59 + this.PropertyAddress.GetHashCode();
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.DateOfMortgageOffer != null)
                    hash = hash * 59 + this.DateOfMortgageOffer.GetHashCode();
                if (this.MiscellaneousInformation != null)
                    hash = hash * 59 + this.MiscellaneousInformation.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // TitleNumber (string) pattern
            Regex regexTitleNumber = new Regex(@"^([A-Z]{0,3}[1-9][0-9]{0,5}|[0-9]{1,6}[ZT])$", RegexOptions.CultureInvariant);
            if (false == regexTitleNumber.Match(this.TitleNumber).Success)
            {
                yield return new ValidationResult("Invalid value for TitleNumber, must match a pattern of /^([A-Z]{0,3}[1-9][0-9]{0,5}|[0-9]{1,6}[ZT])$/.", new [] { "TitleNumber" });
            }

            // MdRef (string) pattern
            Regex regexMdRef = new Regex(@"^e-MD([0-9]{5}|([0-9]{3,4}[A-Z]{1}))$", RegexOptions.CultureInvariant);
            if (false == regexMdRef.Match(this.MdRef).Success)
            {
                yield return new ValidationResult("Invalid value for MdRef, must match a pattern of /^e-MD([0-9]{5}|([0-9]{3,4}[A-Z]{1}))$/.", new [] { "MdRef" });
            }

            // IdentityChecked (string) pattern
            Regex regexIdentityChecked = new Regex(@"^[Y]$", RegexOptions.CultureInvariant);
            if (false == regexIdentityChecked.Match(this.IdentityChecked).Success)
            {
                yield return new ValidationResult("Invalid value for IdentityChecked, must match a pattern of /^[Y]$/.", new [] { "IdentityChecked" });
            }

            // PropertyAddress (string) pattern
            Regex regexPropertyAddress = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexPropertyAddress.Match(this.PropertyAddress).Success)
            {
                yield return new ValidationResult("Invalid value for PropertyAddress, must match a pattern of /^(?!\\s*$).+/.", new [] { "PropertyAddress" });
            }

            // Reference (string) maxLength
            if(this.Reference != null && this.Reference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 50.", new [] { "Reference" });
            }

            // Reference (string) pattern
            Regex regexReference = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexReference.Match(this.Reference).Success)
            {
                yield return new ValidationResult("Invalid value for Reference, must match a pattern of /^(?!\\s*$).+/.", new [] { "Reference" });
            }

            // DateOfMortgageOffer (string) maxLength
            if(this.DateOfMortgageOffer != null && this.DateOfMortgageOffer.Length > 50)
            {
                yield return new ValidationResult("Invalid value for DateOfMortgageOffer, length must be less than 50.", new [] { "DateOfMortgageOffer" });
            }

            // DateOfMortgageOffer (string) pattern
            Regex regexDateOfMortgageOffer = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexDateOfMortgageOffer.Match(this.DateOfMortgageOffer).Success)
            {
                yield return new ValidationResult("Invalid value for DateOfMortgageOffer, must match a pattern of /^(?!\\s*$).+/.", new [] { "DateOfMortgageOffer" });
            }

            // MiscellaneousInformation (string) maxLength
            if(this.MiscellaneousInformation != null && this.MiscellaneousInformation.Length > 250)
            {
                yield return new ValidationResult("Invalid value for MiscellaneousInformation, length must be less than 250.", new [] { "MiscellaneousInformation" });
            }

            // MiscellaneousInformation (string) pattern
            Regex regexMiscellaneousInformation = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexMiscellaneousInformation.Match(this.MiscellaneousInformation).Success)
            {
                yield return new ValidationResult("Invalid value for MiscellaneousInformation, must match a pattern of /^(?!\\s*$).+/.", new [] { "MiscellaneousInformation" });
            }

            yield break;
        }
    }

}
