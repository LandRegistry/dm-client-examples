/* 
 * Deed API
 *
 * Land Registry Deed API
 *
 * OpenAPI spec version: 2.3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Borrower
    /// </summary>
    [DataContract]
    public partial class Borrower :  IEquatable<Borrower>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Borrower" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Borrower() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Borrower" /> class.
        /// </summary>
        /// <param name="Forename">Forename (required).</param>
        /// <param name="MiddleName">MiddleName.</param>
        /// <param name="Surname">Surname (required).</param>
        /// <param name="Token">Borrower token for accessing Borrower Frontend. (required).</param>
        /// <param name="Id">Unique borrower ID. (required).</param>
        /// <param name="Signature">Date and time the signature was applied..</param>
        public Borrower(string Forename = default(string), string MiddleName = default(string), string Surname = default(string), string Token = default(string), int? Id = default(int?), string Signature = default(string))
        {
            // to ensure "Forename" is required (not null)
            if (Forename == null)
            {
                throw new InvalidDataException("Forename is a required property for Borrower and cannot be null");
            }
            else
            {
                this.Forename = Forename;
            }
            // to ensure "Surname" is required (not null)
            if (Surname == null)
            {
                throw new InvalidDataException("Surname is a required property for Borrower and cannot be null");
            }
            else
            {
                this.Surname = Surname;
            }
            // to ensure "Token" is required (not null)
            if (Token == null)
            {
                throw new InvalidDataException("Token is a required property for Borrower and cannot be null");
            }
            else
            {
                this.Token = Token;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Borrower and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this.MiddleName = MiddleName;
            this.Signature = Signature;
        }
        
        /// <summary>
        /// Gets or Sets Forename
        /// </summary>
        [DataMember(Name="forename", EmitDefaultValue=false)]
        public string Forename { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middle_name", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Borrower token for accessing Borrower Frontend.
        /// </summary>
        /// <value>Borrower token for accessing Borrower Frontend.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Unique borrower ID.
        /// </summary>
        /// <value>Unique borrower ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Date and time the signature was applied.
        /// </summary>
        /// <value>Date and time the signature was applied.</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Borrower {\n");
            sb.Append("  Forename: ").Append(Forename).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Borrower);
        }

        /// <summary>
        /// Returns true if Borrower instances are equal
        /// </summary>
        /// <param name="other">Instance of Borrower to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Borrower other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Forename == other.Forename ||
                    this.Forename != null &&
                    this.Forename.Equals(other.Forename)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.Surname == other.Surname ||
                    this.Surname != null &&
                    this.Surname.Equals(other.Surname)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Signature == other.Signature ||
                    this.Signature != null &&
                    this.Signature.Equals(other.Signature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Forename != null)
                    hash = hash * 59 + this.Forename.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.Surname != null)
                    hash = hash * 59 + this.Surname.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Signature != null)
                    hash = hash * 59 + this.Signature.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Forename (string) pattern
            Regex regexForename = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexForename.Match(this.Forename).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Forename, must match a pattern of " + regexForename, new [] { "Forename" });
            }

            // MiddleName (string) pattern
            Regex regexMiddleName = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexMiddleName.Match(this.MiddleName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiddleName, must match a pattern of " + regexMiddleName, new [] { "MiddleName" });
            }

            // Surname (string) pattern
            Regex regexSurname = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexSurname.Match(this.Surname).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Surname, must match a pattern of " + regexSurname, new [] { "Surname" });
            }

            // Token (string) pattern
            Regex regexToken = new Regex(@"^([a-zA-Z0-9]{8})$", RegexOptions.CultureInvariant);
            if (false == regexToken.Match(this.Token).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Token, must match a pattern of " + regexToken, new [] { "Token" });
            }

            yield break;
        }
    }

}
